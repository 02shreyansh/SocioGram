import {createSlice} from "@reduxjs/toolkit"
const initialState={
    loading:false,
    error:null,
    message:null,
}
const likeReducer=createSlice({
    name:"like",
    initialState,
    reducers:{
        likeRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        likeSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        likeFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        addCommentRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        addCommentSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        addCommentFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        deleteCommentRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        deleteCommentSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        deleteCommentFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        newPostRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        newPostSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        newPostFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        updateCaptionRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        updateCaptionSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        updateCaptionFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        deletePostRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        deletePostSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        deletePostFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        updateUserRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        updateUserSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        updateUserFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        ChangePasswordRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        ChangePasswordSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        ChangePasswordFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        deleteProfileRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        deleteProfileSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        deleteProfileFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        forgotPasswordRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        forgotPasswordSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        forgotPasswordFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        resetPaswordRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        resetPaswordSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        resetPaswordFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        followUserRequest:(state)=>{
            state.loading=true
            state.error=null
        },
        followUserSuccess:(state,action)=>{
            state.loading=false
            state.message=action.payload
            state.error=null
        },
        followUserFailure:(state,action)=>{
            state.loading=false
            state.error=action.payload
        },
        clearErrors:(state)=>{
            state.error=null
        },
        clearMessage:(state)=>{
            state.message=null
        },
    }
})
export const {
    likeRequest,
    likeSuccess,
    likeFailure,
    addCommentRequest,
    addCommentSuccess,
    addCommentFailure,
    deleteCommentRequest,
    deleteCommentSuccess,
    deleteCommentFailure,
    newPostRequest,
    newPostSuccess,
    newPostFailure,
    updateCaptionRequest,
    updateCaptionSuccess,
    updateCaptionFailure,
    deletePostRequest,
    deletePostSuccess,
    deletePostFailure,
    updateUserRequest,
    updateUserSuccess,
    updateUserFailure,
    ChangePasswordRequest,
    ChangePasswordSuccess,
    ChangePasswordFailure,
    deleteProfileRequest,
    deleteProfileSuccess,
    deleteProfileFailure,
    forgotPasswordRequest,
    forgotPasswordSuccess,
    forgotPasswordFailure,
    resetPaswordRequest,
    resetPaswordSuccess,
    resetPaswordFailure,
    followUserRequest,
    followUserSuccess,
    followUserFailure,
    clearErrors,
    clearMessage
}=likeReducer.actions;
export default likeReducer.reducer